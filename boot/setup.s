!
!
!	/*???Ú¶?È¡??????Ó²?????Ã²??ý£¬²¢°??Úº?Ä£??system  ?Æ¶????Êµ????Ú´?Î»?Ã´?*/
!
!	setup.s		(C) 1991 Linus Torvalds
!
! setup.s is responsible for getting the system data from the BIOS,
! and putting them into the appropriate places in system memory.
! both setup.s and system has been loaded by the bootblock.
!
! This code asks the bios for memory/disk/other parameters, and
! puts them in a "safe" place: 0x90000-0x901FF, ie where the
! boot-block used to be. It is then up to the protected mode
! system to read them from there before the area is overwritten
! for buffer-blocks.
!

! NOTE! These had better be the same as in bootsect.s!
/*??????Ð©???????Ãº?bootsect.s  ????Í¬*/

INITSEG  = 0x9000	! we move boot here - out of the way
SYSSEG   = 0x1000	! system loaded at 0x10000 (65536).
SETUPSEG = 0x9020	! this is the current segment

.globl begtext, begdata, begbss, endtext, enddata, endbss
.text
begtext:
.data
begdata:
.bss
begbss:
.text

entry start
start:

! ok, the read went well so we get current cursor position and save it for
! posterity.

	/*????BIOS  ?Ð¶?0x10  ??È¡????Î»?Ã£?????*/
	mov	ax,#INITSEG	! this is done in bootsect already, but...
	mov	ds,ax
	mov	ah,#0x03	! read cursor pos
	xor	bh,bh
	int	0x10		! save it in known place, con_init fetches
	mov	[0],dx		! it from 0x90000.

! Get memory size (extended mem, kB)

	/*????BIOS  ?Ð¶?0x15  ??È¡À©Õ¹?Ú´???Ð¡*/
	mov	ah,#0x88
	int	0x15
	mov	[2],ax		/*????Öµ??????0x90002??1????*/

! Get video-card data:

	/*????BIOS  ?Ð¶?0x10  ??È¡??Ê¾????Ç°??Ê¾Ä£Ê½*/
	mov	ah,#0x0f
	int	0x10
	mov	[4],bx		! bh = display page				/*??Ç°Ò³0c90004*/
	mov	[6],ax		! al = video mode, ah = window width	/*0x90006--??Ê¾Ä£Ê½??0x90007---?Ö·?????*/

! check for EGA/VGA and some config parameters

	/*????BIOS  ?Ð¶?0x10  ??????Ê¾??Ê½??È¡????*/
	mov	ah,#0x12
	mov	bl,#0x10
	int	0x10
	mov	[8],ax
	mov	[10],bx		/*0x9000A = ??×°????Ê¾?Ú´æ£¬0x9000B = ??Ê¾×´Ì¬(??É«/??É«)*/
	mov	[12],cx		/*0x9000C = ??Ê¾?????Ô²???*/

! Get hd0 data

	/*È¡??Ò»??Ó²?Ìµ???Ï¢ds  =  ?Îµ?Ö·??si  =  ????Æ«?Æµ?Ö·*/
	mov	ax,#0x0000
	mov	ds,ax			
	lds	si,[4*0x41]		/*È¡?Ð¶???Á¿0x41   ??Öµ??Ò²??hd0  ???????Äµ?Ö·ds:si*/
	mov	ax,#INITSEG
	mov	es,ax
	mov	di,#0x0080		/*??????Ä¿?Äµ?Ö·:   0x9000:0x0080  =  es:si*/
	mov	cx,#0x10			/*????16?Ö½?--???Ä³???*/
	rep
	movsb

! Get hd1 data

	mov	ax,#0x0000
	mov	ds,ax
	lds	si,[4*0x46]		/*È¡?Ð¶???Á¿0x46   ??Öµ??Ò²??hd1  ???????Äµ?Ö·ds:si*/
	mov	ax,#INITSEG
	mov	es,ax
	mov	di,#0x0090		/*??????Ä¿?Äµ?Ö·:   0x9000:0x0090  =  es:si*/
	mov	cx,#0x10
	rep
	movsb

! Check that there IS a hd1 :-)

	/*????BIOS  ?Ð¶?0x13  ??È¡??????
		?????Ç·??Ðµ?2  ??Ó²?Ì£?Ã»?Ð¾Í°Ñµ?2????????*/
	mov	ax,#0x01500
	mov	dl,#0x81
	int	0x13
	jc	no_disk1
	cmp	ah,#3			/*??Ó²?????*/
	je	is_disk1
no_disk1:
	mov	ax,#INITSEG		/*??2 ??Ó²?Ì²????Ú£??ò½«µ?2 ??????0*/
	mov	es,ax
	mov	di,#0x0090
	mov	cx,#0x10
	mov	ax,#0x00
	rep
	stosb
is_disk1:

! now we want to move to protected mode ...
	/*???ë±£??Ä£Ê½*/

	cli			! no interrupts allowed !	/*?Ó´Ë¿?Ê¼???????Ð¶????????????????????*/

! first we move the system to it's rightful place

	/*??????system  Ä£????0x10000  ?Æ¶???0x00000  Î»??*/
	mov	ax,#0x0000
	cld			! 'direction'=0, movs moves forward		/*??????Ö¾Î»??0*/
do_move:
	mov	es,ax		! destination segment
	add	ax,#0x1000
	cmp	ax,#0x9000					/*????Ò»???Æ¶??? ????*/
	jz	end_move
	mov	ds,ax		! source segment
	sub	di,di
	sub	si,si
	mov 	cx,#0x8000		/*64kb?Ö½?*/
	rep
	movsw
	jmp	do_move

! then we load the segment descriptors

/*???Ø¶???????
	??????32  Î»????Ä£Ê½?Ä²???
	?Ú½??ë±£??Ä£Ê½??????Ö®Ç°??????Òª???????Ãº?ÒªÊ¹?ÃµÄ¶?????????
	??????È«?????????????Ð¶?????????*/

end_move:
	mov	ax,#SETUPSEG	! right, forgot this at first. didn't work :-)
	mov	ds,ax			/*ds  Ö¸?ò±¾³????Ä¶?*/
	lidt	idt_48		! load idt with 0,0						/*????IDT  ?Ä´???*/
	lgdt	gdt_48		! load gdt with whatever appropriate		/*????GDT  ?Ä´???*/

! that was painless, now we enable A20

	call	empty_8042					/*????8042  ×´Ì¬?Ä´??÷£¬µÈ´????ë»º??????
										Ö»?Ðµ????ë»º????Îª??Ê±?Å¿??Ô¶???Ö´??Ð´????*/
	mov	al,#0xD1		! command write	/*0xD1----ÒªÐ´???Ýµ?*/
	out	#0x64,al						/*8042 ??P2  ?Ë¿Ú£?Î»1  ????A20  ?ßµ?Ñ¡Í¨
										????ÒªÐ´??0x60  ??*/
	call	empty_8042					/*?È´????ë»º?????Õ£????????Ç·ñ±»½???*/
	mov	al,#0xDF		! A20 on			/*Ñ¡Í¨A20  ??Ö·?ßµÄ²???*/
	out	#0x60,al
	call	empty_8042					/*????Ê±???ë»º????Îª?Õ£?????Ê¾A20  ??Ö·???Ñ¾?Ñ¡Í¨*/

! well, that went ok, I hope. Now we have to reprogram the interrupts :-(
! we put them right after the intel-reserved hardware interrupts, at
! int 0x20-0x2F. There they won't mess up anything. Sadly IBM really
! messed this up with the original PC, and they haven't been able to
! rectify it afterwards. Thus the bios puts interrupts at 0x08-0x0f,
! which is used for the internal hardware interrupts as well. We just
! have to reprogram the 8259's, and it isn't fun.

	mov	al,#0x11		! initialization sequence
	out	#0x20,al		! send it to 8259A-1				/*??Ð¾Æ¬*/
	.word	0x00eb,0x00eb		! jmp $+2, jmp $+2	/*'$'  ??Ê¾??Ç°Ö¸???Äµ?Ö·??????Ê±????*/
	out	#0xA0,al		! and to 8259A-2					/*??Ð¾Æ¬*/
	.word	0x00eb,0x00eb
	
	/*Linux ÏµÍ³Ó²???Ð¶ÏºÅ±????Ã³É´?0x20  ??Ê¼??*/
	mov	al,#0x20		! start of hardware int's (0x20)
	out	#0x21,al		/*????Ð¾Æ¬ICW2  ?????Ö£???????Ê¼?Ð¶Ïº?*/
	.word	0x00eb,0x00eb
	mov	al,#0x28		! start of hardware int's 2 (0x28)
	out	#0xA1,al		/*?Í´?Ð¾Æ¬ICW2  ?????Ö£???Ð¾Æ¬????Ê¼?Ð¶Ïº?*/
	.word	0x00eb,0x00eb
	mov	al,#0x04		! 8259-1 is master
	out	#0x21,al		/*????Ð¾Æ¬CW3  ?????Ö£???Ð¾Æ¬??IR2   Á¬?Ó´?Ð¾Æ¬??INT*/
	.word	0x00eb,0x00eb
	mov	al,#0x02		! 8259-2 is slave
	out	#0xA1,al		/*?Í´?Ð¾Æ¬ICW3  ?????Ö£???Ð¾Æ¬??INT  Á¬?Óµ???Ð¾Æ¬??IR2????*/
	.word	0x00eb,0x00eb
	mov	al,#0x01		! 8086 mode for both
	out	#0x21,al		/*????Ð¾Æ¬CW4  ?????Ö£?8086  Ä£Ê½*/
	.word	0x00eb,0x00eb
	out	#0xA1,al		/*?Í´?Ð¾Æ¬CW4  ?????Ö£?*/
	.word	0x00eb,0x00eb
	mov	al,#0xFF		! mask off all interrupts for now
	out	#0x21,al		/*?Á±???Ð¾Æ¬?????Ð¶?????*/
	.word	0x00eb,0x00eb
	out	#0xA1,al		/*?Á±Î´?Ð¾Æ¬?????Ð¶?????*/

! well, that certainly wasn't fun :-(. Hopefully it works, and we don't
! need no steenking BIOS anyway (except for the initial loading :-).
! The BIOS-routine wants lots of unnecessary data, and it's less
! "interesting" anyway. This is how REAL programmers do it.
!
! Well, now's the time to actually move into protected mode. To make
! things as simple as possible, we do no register set-up or anything,
! we let the gnu-compiled 32-bit programs do that. We just jump to
! absolute address 0x00000, in 32-bit protected mode.

	mov	ax,#0x0001	! protected mode (PE) bit		/*????Ä£Ê½????Î»(PE)*/
	lmsw	ax		! This is it!					/???Ø»???×´Ì¬??*/
	jmpi	0,8		! jmp offset 0 of segment 8 (cs)		/*?Î¼???×ª??????Ë¢??CPU   ??Ç°Ö¸??????
													??????head.s   ??????Ê¼??????Ö´????È¥
													8:  ??Ñ¡??????Ö¸??????Òª??????????
													0:  ???????Úµ?Æ«??Öµ*/

! This routine checks that the keyboard command queue is empty
! No timeout is used - if this hangs there is something wrong with
! the machine, and we probably couldn't proceed anyway.

/*Ö»???????ë»º????Îª??Ê±(????Î»1  =  0)???Å¿??Ô¶???Ð´??????*/
empty_8042:
	.word	0x00eb,0x00eb
	in	al,#0x64	! 8042 status port			/*??AT???Ì¿?????×´Ì¬?Ä´???*/
	test	al,#2		! is input buffer full?	/*????Î»1   ?????ë»º?????Ç·???*/
	jnz	empty_8042	! yes - loop
	ret


/*È«?????????í¿ªÊ¼??*/
gdt:
	.word	0,0,0,0		! dummy		/*??Ò»???????û£¬²»??*/

/*??GDT  ???Ð£???????Æ«??Á¿??0x08   ???ÚºË´?????Ñ¡??????Öµ*/
	.word	0x07FF		! 8Mb - limit=2047 (2048*4096=8Mb)
	.word	0x0000		! base address=0
	.word	0x9A00		! code read/exec
	.word	0x00C0		! granularity=4096, 386

/*??GDT  ???Ð£???????Æ«??Á¿??0x10   ???Úº????Ý¶?Ñ¡??????Öµ*/
	.word	0x07FF		! 8Mb - limit=2047 (2048*4096=8Mb)
	.word	0x0000		! base address=0
	.word	0x9200		! data read/write
	.word	0x00C0		! granularity=4096, 386


/*?????Ð¶?????????
	CPU  Òª???Ú½??ë±£??Ä£Ê½Ö®Ç°Òª????IDT  ?í£¬
	????????????Ò»?ö³¤¶?Îª0   ?Ä¿Õ±?*/
idt_48:
	.word	0			! idt limit=0
	.word	0,0			! idt base=0L

/*????È«????????*/
gdt_48:
	.word	0x800		! gdt limit=2048, 256 GDT entries
	.word	512+gdt,0x9	! gdt base = 0X9xxxx
	
.text
endtext:
.data
enddata:
.bss
endbss:
