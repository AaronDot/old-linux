!
!
!  /*?????????????ò£¬±???????×¤???Ú´??ÌµÄµ?Ò»????????
		(??????????0  ?ÅµÀ£?0  ??Í·????Ò»??????)
		PC???Óµ?ROM BIOS?Ô¼??ó£¬½?BIOS  ???Øµ??Ú´?0x7C00??????Ö´??*/
!
!
! ?/*  SYS_SIZE ??Òª???Øµ?ÏµÍ³Ä£?é³¤??*/
! SYS_SIZE is the number of clicks (16 bytes) to be loaded.
! 0x3000 is 0x30000 bytes = 196kB, more than enough for current
! versions of linux
!
!/**/
SYSSIZE = 0x3000
!
!	bootsect.s		(C) 1991 Linus Torvalds
!
! bootsect.s is loaded at 0x7c00 by the bios-startup routines, and moves
! iself out of the way to address 0x90000, and jumps there.
!
! It then loads 'setup' directly after itself (0x90200), and the system
! at 0x10000, using BIOS interrupts. 
!
! NOTE! currently system is at most 8*65536 bytes long. This should be no
! problem, even in the future. I want to keep it simple. This 512 kB
! kernel size should be enough, especially as this doesn't contain the
! buffer cache as in minix
!
! The loader has been made as simple as possible, and continuos
! read errors will result in a unbreakable loop. Reboot by hand. It
! loads pretty fast by getting whole sectors at a time whenever possible.

.globl begtext, begdata, begbss, endtext, enddata, endbss		!/*??????6  ??È«?Ö±?Á¿*/
.text													!/*?Ä±???*/
begtext:
.data												!/*???Ý¶?*/
begdata:
.bss													!/*Î´??Ê¼?????Ý¶?*/
begbss:
.text													!/*???Ý¶?*/

SETUPLEN = 4				! nr of setup-sectors	/*setup??????????*/
BOOTSEG  = 0x07c0			! original address of boot-sector		/*bootsect??Ô­Ê¼??Ö·*/
INITSEG  = 0x9000			! we move boot here - out of the way		/*??bootsect?Æµ????ï£¬?Ü¿?*/
SETUPSEG = 0x9020			! setup starts here			/*setup?????????ï¿ªÊ¼*/
SYSSEG   = 0x1000			! system loaded at 0x10000 (65536).		/*systemÄ£?????Øµ?0x10000??*/
ENDSEG   = SYSSEG + SYSSIZE		! where to stop loading		/*Í£Ö¹???ØµÄ¶Îµ?Ö·*/

! ROOT_DEV:	0x000 - same type of floppy as boot.
!		0x301 - first partition on first drive etc
ROOT_DEV = 0x306


entry start			!/*??ÖªÁ¬?Ó³??ò£¬³?????start   ??Ê¼Ö´??*/
start:
	mov	ax,#BOOTSEG		!/*??ds  ?Ä´?????Îª0x7C0*/
	mov	ds,ax
	mov	ax,#INITSEG
	mov	es,ax
	mov	cx,#256			!/*?Æ¶?????Öµ*/
	sub	si,si				!/*Ô´??Ö·ds:si=0x07c0:0x0000*/
	sub	di,di				!/*Ä¿?Äµ?Ö·es:di=0x9000:0x0000*/
	rep					!/*?Ø¸?Ö´?Ðµ?cx=0??*/
	movw				!/*??movs?????????Ú´?[si]???Æ¶?cx ???Öµ?[di]??*/
	jmpi	go,INITSEG		!/*?Î¼???×ª*/
	
!/*CPU????0X90000  ???Ä´?????Ö´??
!	Òª??sp  Ö¸??Ô¶????512  ?Ö½?Æ«?Æ£???Îª0x90200  ?????Ð·???setup  ????*/
go:	mov	ax,cs
	mov	ds,ax
	mov	es,ax

!ÏµÍ³??Ê¼????Ê±Ê¹?ÃµÄ¶?Õ»
	
! put stack at 0x9ff00.		!/*??spÖ¸??0x9ff00*/
	mov	ss,ax
	mov	sp,#0xFF00		! arbitrary value >>512

! load the setup-sectors directly after the bootblock.
! Note that 'es' is already set up.			!/*exÒªÖ¸??Ä¿?Ä¶Îµ?Ö·??0x9000*/

!/*????BIOS  ?Ð¶?INT  0x13  ??setup  Ä£???Ó´??ÌµÚ¶?????????Ê¼?Áµ?0x90200??Ê¼????
!	?????Ä¸???????????????Î»?????÷£¬²?????*/
load_setup:
	mov	dx,#0x0000		! drive 0, head 0
	mov	cx,#0x0002		! sector 2, track 0
	mov	bx,#0x0200		! address = 512, in INITSEG
	mov	ax,#0x0200+SETUPLEN	! service 2, nr of sectors
	int	0x13			! read it
	jnc	ok_load_setup		! ok - continue
	mov	dx,#0x0000
	mov	ax,#0x0000		! reset the diskette
	int	0x13
	j	load_setup

ok_load_setup:

!/*È¡???????????Ä²???*/
! Get disk drive parameters, specifically nr of sectors/track

	mov	dl,#0x00
	mov	ax,#0x0800		! AH=8 is get drive parameters
	int	0x13
	mov	ch,#0x00

!/*??Ê¾??Ò»???????Ä²???????cs  ?Î¼Ä´?????Ö¸?Ä¶???
	Ö»Ó°????Ò»??????*/
	seg cs

!/*????Ã¿?Åµ???????*/
	mov	sectors,cx
	mov	ax,#INITSEG
	mov	es,ax			!/*??Îª??????È¡???Ì²????Ð¶Ï¸?Ð´??es??Öµ??????Òª???Â¸Ä»?*/

! Print some inane message

!/*??Ê¾??Ï¢"Loading system....."*/

	mov	ah,#0x03		! read cursor pos
	xor	bh,bh
	int	0x10
	
	mov	cx,#24
	mov	bx,#0x0007		! page 0, attribute 7 (normal)
	mov	bp,#msg1
	mov	ax,#0x1301		! write string, move cursor
	int	0x10

! ok, we've written the message, now
! we want to load the system (at 0x10000)

!/*????system  Ä£?éµ½0x10000??*/

	mov	ax,#SYSSEG
	mov	es,ax		! segment of 0x010000
	call	read_it
	call	kill_motor		!/*?Ø±??????????ï£¬??Öª????????×´Ì¬*/

! After that we check which root-device to use. If the device is
! defined (!= 0), nothing is done and the given device is used.
! Otherwise, either /dev/PS0 (2,28) or /dev/at0 (2,8), depending
! on the number of sectors that the BIOS reports currently.

!/*????Òª???ÃµÄ¸??è±¸*/

	seg cs
	mov	ax,root_dev		!/*?Ð¶?508??509?Ö½Ú´??Ä¸??è±¸?Ç·ñ±»¶???*/
	cmp	ax,#0
	jne	root_defined
	seg cs
	mov	bx,sectors
	mov	ax,#0x0208		! /dev/ps0 - 1.2Mb
	cmp	bx,#15
	je	root_defined		!/*???????È£?ax?Ð¾??????????????è±¸??*/
	mov	ax,#0x021c		! /dev/PS0 - 1.44Mb
	cmp	bx,#18
	je	root_defined
undef_root:				!/*???????È£????À»?*/
	jmp undef_root
root_defined:
	seg cs
	mov	root_dev,ax		!/*???????????è±¸?Å±??Öµ?root_dev?Ð¡?*/

! after that (everyting loaded), we jump to
! the setup-routine loaded directly after
! the bootblock:


!/*???Ð³??ò¶¼¼??????Ï£???×ª??????????bootsect??????setup?????Ð£?
	??×ª??0x9020:0000(setup.c??????Ê¼??)È¥Ö´??*/
	jmpi	0,SETUPSEG			!/*???Ë±??????Í½?????*/

! This routine loads the system at address 0x10000, making sure
! no 64kB boundaries are crossed. We try to load it as fast as
! possible, loading whole tracks whenever we can.
!
! in:	es - starting address segment (normally 0x1000)
!

/*???Ó³?????ÏµÍ³Ä£?????Øµ??Ú´???Ö·0x1000??????È·??Ã»??Ã»??Ô½??*/
sread:	.word 1+SETUPLEN	! sectors read of current track
head:	.word 0			! current head
track:	.word 0			! current track

read_it:
	/*?????????Ä¶?Öµ???????Ï¶????????Ý±???????Î»???Ú´???Ö·64KB?Ä±ß½ç¿ªÊ¼????
		??????????Ñ­??*/
	mov ax,es
	test ax,#0x0fff
die:	jne die			! es must be at 64kB boundary			/*esÖµ????Î»??64KB  ??Ö·?ß½ç´¦*/
	xor bx,bx		! bx is starting address within segment		/*bx?Ç¶???Æ«??*/
rp_read:
	/*?????Ð¶??Ç·??Ñ¾?????È«??????
		???????Ç¾???×ª??ok1_read???Å£????? ??*/
	mov ax,es
	cmp ax,#ENDSEG		! have we loaded all yet?
	jb ok1_read
	ret
ok1_read:
	/*??????È¡È«????Î´?????????ñ³¬¹?64KB*/
	seg cs
	mov ax,sectors		/*È¡Ã¿?Åµ???????*/
	sub ax,sread			/*??È¡??Ç°?Åµ??Ñ¶???????*/
	mov cx,ax			/*??Ç°Î´?Á´Åµ???*/
	shl cx,#9				/**/
	add cx,bx			/*?Ë´Î²????ó£¬¶??Ú¹????????Ö½???*/
	jnc ok2_read			/*Ã»?Ð³?????×ª??ok2_read*/
	je ok2_read			/**/
	xor ax,ax
	sub ax,bx
	shr ax,#9
ok2_read:
	/*?Ã´Åµ??Ç·???????Î´??*/
	call read_track
	mov cx,ax
	add ax,sread
	seg cs
	cmp ax,sectors	/*??????????Î´?Á£???????3*/	
	jne ok3_read
	/*×ª????Ò»?Åµ?*/
	mov ax,#1
	sub ax,head		/*?Ð¶Ïµ?Ç°?Åµ?*/
	jne ok4_read		/*??????0  ??Í·??????È¥??1  ??Í·???Ïµ?????????*/
	inc track			/*????????Ò»?Åµ?*/
ok4_read:
	mov head,ax		/*???æµ±Ç°??Í·*/
	xor ax,ax			/*?åµ±Ç°?Åµ??Ñ¶???????*/
ok3_read:
	/*??Ç°?ÅµÀ»???Î´??????*/
	mov sread,ax		/*???æµ±Ç°?Åµ??Ñ¶???????*/
	shl cx,#9			/*?Ï´??Ñ¶?*/
	add bx,cx		/*??????Ç°???????Ý¿?Ê¼Î»??*/
	jnc rp_read
	/*????Ò»??*/
	mov ax,es
	add ax,#0x1000		/*??Ò»??64KB  ?Ú´æ¿ªÊ¼??*/
	mov es,ax
	xor bx,bx				/*?????Ú¿?Ê¼Æ«??Öµ*/
	jmp rp_read			/*??????*/

/*?Áµ?Ç°?Åµ???Ö¸????Ê¼????????????????*/
read_track:
	push ax
	push bx
	push cx
	push dx
	mov dx,track		/*È¡??Ç°?ÅµÀº?*/
	mov cx,sread		/*È¡??Ç°?Åµ??Ñ¶???????*/
	inc cx			/*c1 = ??Ê¼??????*/
	mov ch,dl		/*ch  =  ??Ç°?ÅµÀº?*/
	mov dx,head		/*È¡??Ç°??Í·??*/
	mov dh,dl		/*dh  =  ??Í·??*/
	mov dl,#0		/*dl  =  ????????(0  ??Ê¾??Ç°A  ??????)*/
	and dx,#0x0100	/*??Í·?Å²?????1*/
	mov ah,#2		/*ah  =  2???Á´??????????Üº?*/
	int 0x13
	jc bad_rt			/*????*/
	pop dx
	pop cx
	pop bx
	pop ax
	ret
	
/*?Á´??Ì³??í£¬Ö´??????????Î»????????????read_track  ??????*/
bad_rt:	mov ax,#0
	mov dx,#0
	int 0x13
	pop dx
	pop cx
	pop bx
	pop ax
	jmp read_track

/*
 * This procedure turns off the floppy drive motor, so
 * that we enter the kernel in a known state, and
 * don't have to worry about it later.
 */

 /*?Ø±??????????ï£¬?????ÚºËº?Ò²??Öª??????????×´Ì¬*/
kill_motor:
	push dx
	mov dx,#0x3f2		/*???????Æ¿????????????Ä´????Ë¿Ú£?Ö»Ð´*/
	mov al,#0			/*A?????÷£¬¹Ø±?FDC   ??Ö¹DMA???Ð¶????ó£¬¹Ø±?????*/
	outb					/*??al   ????????????dx   Ö¸???Ë¿?È¥*/
	pop dx
	ret

sectors:
	.word 0				/*???Åµ?Ç°????Ã¿?ÅµÀµ???????*/

msg1:					/*????BIOS  ?Ð¶???Ê¾??Ï¢*/
	.byte 13,10			/*?Ø³??????Ðµ?ASCII??*/
	.ascii "Loading system ..."
	.byte 13,10,13,10		/*??24  ??*/


/*??????????508  ??Ê¼*/
.org 508
root_dev:
	.word ROOT_DEV		/*???Å¸??Ä¼?ÏµÍ³???Úµ??è±¸??(init/main.c?Ð»??Ãµ?)*/

/*????????????Ð§?????????Ä±?Ö¾
	????BIOS  ?ÐµÄ³???????????????Ê±Ê¶??Ê¹?Ã£?
	????Î»????????????????Á½???Ö½?*/
boot_flag:
	.word 0xAA55

.text
endtext:
.data
enddata:
.bss
endbss:
